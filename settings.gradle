pluginManagement {
    repositories {
        maven { url "https://maven.fabricmc.net/" }
        maven { url "https://maven.architectury.dev/" }
        maven { url "https://maven.minecraftforge.net/" }
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositories {
        mavenCentral()
    }
    versionCatalogs {
        // Minecraft Version
        def minecraftVersion = "${minecraft_version}"

        // Mod Dependencies Versions
        // Common
        def jeiVersion = "${jei_version}"
        def reiVersion = "${rei_version}"
        def emiVersion = "${emi_version}"
        def kjsVersion = "${kjs_version}"

        // Fabric
        def fabricLoaderVersion = "${fabric_loader_version}" // https://fabricmc.net/develop/
        def fabricApiVersion = "${fabric_api_version}" // https://fabricmc.net/develop/
        def createFabricVersion = "${create_fabric_version}"
        def lazyDfuFabricVersion = "${lazy_dfu_fabric_version}"
        def modMenuFabricVersion = "${mod_menu_fabric_version}"
        def jadeFabricVersion = "${jade_fabric_version}"

        // Forge
        def forgeVersion = "${forge_version}"
        def createForgeVersion = "${create_forge_version}"
        def flywheelForgeVersion = "${flywheel_forge_version}"
        def jadeForgeVersion = "${jade_forge_version}"

        // Libs
        def quiltMappingsVersion = "${quilt_mappings_version}"  // https://lambdaurora.dev/tools/import_quilt.html
        def parchmentVersion = "${parchment_version}" // https://parchmentmc.org/docs/getting-started
        def shadowVersion = "${shadow_version}"
        def architecturyPluginVersion = "${architectury_plugin_version}"
        def architecturyLoomVersion = "${architectury_loom_version}"
        def mixinextrasVersion = "${mixinextras_version}"
        def configurationVersion = "${configuration_version}"

        fabric {
            def fabricLoader = version("fabricLoader", fabricLoaderVersion)
            library("fabricLoader", "net.fabricmc", "fabric-loader").versionRef(fabricLoader)

            def fabricApi = version("fabricApi", "${fabricApiVersion}+${minecraftVersion}")
            library("fabricApi", "net.fabricmc.fabric-api", "fabric-api").versionRef(fabricApi)

            def createFabric = version("create-fabric", "${createFabricVersion}+mc${minecraftVersion}")
            library("createFabric", "com.simibubi.create", "create-fabric-${minecraftVersion}").versionRef(createFabric)

            def lazyDfu = version("lazydfu", lazyDfuFabricVersion)
            library("lazydfu", "maven.modrinth", "lazydfu").versionRef(lazyDfu)

            def modMenu = version("modmenu", modMenuFabricVersion)
            library("modmenu", "com.terraformersmc", "modmenu").versionRef(modMenu)

            def jei = version("jei", jeiVersion)
            library("jei-common-api", "mezz.jei", "jei-${minecraftVersion}-common-api").versionRef(jei)
            library("jei-fabric-api", "mezz.jei", "jei-${minecraftVersion}-fabric-api").versionRef(jei)
            library("jei-fabric-impl", "mezz.jei", "jei-${minecraftVersion}-fabric").versionRef(jei)
            bundle("jei", ["jei-common-api", "jei-fabric-api"])

            def rei = version("rei", reiVersion)
            library("rei-plugin", "me.shedaniel", "RoughlyEnoughItems-default-plugin-fabric").versionRef(rei)
            library("rei-api", "me.shedaniel", "RoughlyEnoughItems-api-fabric").versionRef(rei)
            library("rei-fabric", "me.shedaniel", "RoughlyEnoughItems-fabric").versionRef(rei)

            def emi = version("emi", emiVersion)
            library("emi", "dev.emi", "emi-fabric").versionRef(emi)

            def jade = version("jade", jadeFabricVersion)
            library("jade", "maven.modrinth", "jade").versionRef(jade)

            def kubejs = version("kubejs", kjsVersion)
            library("kubejs", "dev.latvian.mods", "kubejs-fabric").versionRef(kubejs)

            def mixinextras = version("mixinextras", mixinextrasVersion)
            library("mixinextras", "io.github.llamalad7", "mixinextras-fabric").versionRef(mixinextras)
            library("mixinextras-common", "io.github.llamalad7", "mixinextras-common").versionRef(mixinextras)

            def configuration = version("configuration", configurationVersion)
            library("configuration", "dev.toma.configuration", "configuration-fabric-1.20.1").versionRef(configuration)
        }

        forge {
            version("forgeShortVersion", forgeVersion)
            def minecraftForge = version("minecratfForge", "${minecraftVersion}-${forgeVersion}")
            library("minecraftForge", "net.minecraftforge", "forge").versionRef(minecraftForge)

            def createForge = version("createForge", createForgeVersion)
            library("createForge", "com.simibubi.create", "create-${minecraftVersion}").versionRef(createForge)

            def flywheel = version("flywheel", flywheelForgeVersion)
            library("flywheel", "com.jozufozu.flywheel", "flywheel-forge-${minecraftVersion}").versionRef(flywheel)

            def jei = version("jei", jeiVersion)
            library("jei-common-api", "mezz.jei", "jei-${minecraftVersion}-common-api").versionRef(jei)
            library("jei-forge-api", "mezz.jei", "jei-${minecraftVersion}-forge-api").versionRef(jei)
            library("jei-forge-impl", "mezz.jei", "jei-${minecraftVersion}-forge").versionRef(jei)

            def rei = version("rei", reiVersion)
            library("rei-plugin", "me.shedaniel", "RoughlyEnoughItems-default-plugin-forge").versionRef(rei)
            library("rei-api", "me.shedaniel", "RoughlyEnoughItems-api-forge").versionRef(rei)
            library("rei-forge", "me.shedaniel", "RoughlyEnoughItems-forge").versionRef(rei)

            def emi = version("emi", emiVersion)
            library("emi", "dev.emi", "emi-forge").versionRef(emi)

            def jade = version("jade", jadeForgeVersion)
            library("jade", "maven.modrinth", "jade").versionRef(jade)

            def kubejs = version("kubejs", kjsVersion)
            library("kubejs", "dev.latvian.mods", "kubejs-forge").versionRef(kubejs)

            def mixinextras = version("mixinextras", mixinextrasVersion)
            library("mixinextras-forge", "io.github.llamalad7", "mixinextras-forge").versionRef(mixinextras)

            def configuration = version("configuration", configurationVersion)
            library("configuration", "dev.toma.configuration", "configuration-forge-1.20.1").versionRef(configuration)
        }

        libs {
            version("quiltMappings", quiltMappingsVersion)
            version("parchment", parchmentVersion)

            def minecraft = version("minecraft", minecraftVersion)
            library("minecraft", "com.mojang", "minecraft").versionRef(minecraft)

            def shadow = version("shadow", shadowVersion)
            plugin("shadow", "com.github.johnrengelman.shadow").versionRef(shadow)

            def architecturyPlugin = version("architectury", architecturyPluginVersion)
            plugin("architectury", "architectury-plugin").versionRef(architecturyPlugin)

            def architecturyLoom = version("architectury-loom", architecturyLoomVersion)
            plugin("architectury-loom", "dev.architectury.loom").versionRef(architecturyLoom)
        }
    }
}

include("${mod_id}-common")
include("${mod_id}-fabric")
include("${mod_id}-forge")

project(":${mod_id}-common").setProjectDir(new File("common"))
project(":${mod_id}-forge").setProjectDir(new File("forge"))
project(":${mod_id}-fabric").setProjectDir(new File("fabric"))

rootProject.name = "${mod_name}"